type Comic {
  date: Int
  description: String
  grade: Grade!
  grade_id: Int!
  id: ID!
  issue_no: Int
  title: Title!
  title_id: Int!
}

type ComicsPage {
  items: [Comic]
  pageInfo: PageInfo
  totalCount: Int!
}

type Grade {
  abbr: String!
  id: Int!
  name: String!
  score: Float!
}

type Mutation {
  updateTitle(id: Int!, update: UpdateTitleInput!): Title
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  startCursor: String
}

type Publisher {
  id: ID!
  name: String!
  titles: [Title]
  url: String
}

type PublishersPage {
  items: [Publisher]
  pageInfo: PageInfo
  totalCount: Int!
}

type Query {
  comic(id: Int!): Comic
  comics(
    afterCursor: String = null
    beforeCursor: String = null
    pageSize: Int = 100
    publisherId: Int
    titleId: Int
  ): ComicsPage
  publisher(id: Int!): Publisher
  publishers(
    afterCursor: String = null
    beforeCursor: String = null
    pageSize: Int = 100
  ): PublishersPage
  title(id: Int!): Title
  titles(
    afterCursor: String = null
    beforeCursor: String = null
    pageSize: Int = 100
    publisherId: String
  ): TitlesPage
}

type Title {
  id: ID!
  issues: Int
  name: String!
  publisher: Publisher!
  publisher_id: Int!
  url: String
  volume: Int
  year: Int
}

type TitlesPage {
  items: [Title]
  pageInfo: PageInfo
  totalCount: Int!
}

input UpdateTitleInput {
  name: String
  publisher_id: Int
  url: String
  volume: Int
  year: Int
}
